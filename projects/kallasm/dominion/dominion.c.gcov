        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:14
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://Draw 3 cards for current player
        -:    9:void playSmithy(struct gameState *state, int handPos);
        -:   10:
        -:   11://Draw cards until 2 treasure cards are drawn. Discard all other drawn cards.
        -:   12:void playAdventurer(struct gameState *state);
        -:   13:
        -:   14://Current player draws 4 cards and gets 1 buy. All other players draw a card.
        -:   15:void playCouncilRoom(struct gameState *state, int handPos);
        -:   16:
        -:   17://Each other player discards the top card of his deck and then gains a curse card,
        -:   18://	putting it on top of his deck
        -:   19:void playSeaHag(struct gameState *state, int handPos);
        -:   20:
        -:   21://Player draws 1 card and gets 2 additional actions this turn
        -:   22:void playVillage(struct gameState *state, int handPos);
        -:   23:
  2612656:   24:int compare(const void* a, const void* b) {
  2612656:   25:  if (*(int*)a > *(int*)b)
  1310465:   26:    return 1;
  1302191:   27:  if (*(int*)a < *(int*)b)
   591304:   28:    return -1;
   710887:   29:  return 0;
        -:   30:}
        -:   31:
    #####:   32:struct gameState* newGame() {
    #####:   33:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   34:  return g;
        -:   35:}
        -:   36:
    #####:   37:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   38:		  int k8, int k9, int k10) {
    #####:   39:  int* k = malloc(10 * sizeof(int));
    #####:   40:  k[0] = k1;
    #####:   41:  k[1] = k2;
    #####:   42:  k[2] = k3;
    #####:   43:  k[3] = k4;
    #####:   44:  k[4] = k5;
    #####:   45:  k[5] = k6;
    #####:   46:  k[6] = k7;
    #####:   47:  k[7] = k8;
    #####:   48:  k[8] = k9;
    #####:   49:  k[9] = k10;
    #####:   50:  return k;
        -:   51:}
        -:   52:
    #####:   53:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   54:		   struct gameState *state) {
        -:   55:
        -:   56:  int i;
        -:   57:  int j;
        -:   58:  int it;			
        -:   59:  //set up random number generator
    #####:   60:  SelectStream(1);
    #####:   61:  PutSeed((long)randomSeed);
        -:   62:  
        -:   63:  //check number of players
    #####:   64:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   65:    {
    #####:   66:      return -1;
        -:   67:    }
        -:   68:
        -:   69:  //set number of players
    #####:   70:  state->numPlayers = numPlayers;
        -:   71:
        -:   72:  //check selected kingdom cards are different
    #####:   73:  for (i = 0; i < 10; i++)
        -:   74:    {
    #####:   75:      for (j = 0; j < 10; j++)
        -:   76:        {
    #####:   77:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   78:	    {
    #####:   79:	      return -1;
        -:   80:	    }
        -:   81:        }
        -:   82:    }
        -:   83:
        -:   84:
        -:   85:  //initialize supply
        -:   86:  ///////////////////////////////
        -:   87:
        -:   88:  //set number of Curse cards
    #####:   89:  if (numPlayers == 2)
        -:   90:    {
    #####:   91:      state->supplyCount[curse] = 10;
        -:   92:    }
    #####:   93:  else if (numPlayers == 3)
        -:   94:    {
    #####:   95:      state->supplyCount[curse] = 20;
        -:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[curse] = 30;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Victory cards
    #####:  103:  if (numPlayers == 2)
        -:  104:    {
    #####:  105:      state->supplyCount[estate] = 8;
    #####:  106:      state->supplyCount[duchy] = 8;
    #####:  107:      state->supplyCount[province] = 8;
        -:  108:    }
        -:  109:  else
        -:  110:    {
    #####:  111:      state->supplyCount[estate] = 12;
    #####:  112:      state->supplyCount[duchy] = 12;
    #####:  113:      state->supplyCount[province] = 12;
        -:  114:    }
        -:  115:
        -:  116:  //set number of Treasure cards
    #####:  117:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  118:  state->supplyCount[silver] = 40;
    #####:  119:  state->supplyCount[gold] = 30;
        -:  120:
        -:  121:  //set number of Kingdom cards
    #####:  122:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  123:    {
    #####:  124:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  125:	{
    #####:  126:	  if (kingdomCards[j] == i)
        -:  127:	    {
        -:  128:	      //check if card is a 'Victory' Kingdom card
    #####:  129:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  130:		{
    #####:  131:		  if (numPlayers == 2){ 
    #####:  132:		    state->supplyCount[i] = 8; 
        -:  133:		  }
    #####:  134:		  else{ state->supplyCount[i] = 12; }
        -:  135:		}
        -:  136:	      else
        -:  137:		{
    #####:  138:		  state->supplyCount[i] = 10;
        -:  139:		}
    #####:  140:	      break;
        -:  141:	    }
        -:  142:	  else    //card is not in the set choosen for the game
        -:  143:	    {
    #####:  144:	      state->supplyCount[i] = -1;
        -:  145:	    }
        -:  146:	}
        -:  147:
        -:  148:    }
        -:  149:
        -:  150:  ////////////////////////
        -:  151:  //supply intilization complete
        -:  152:
        -:  153:  //set player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      state->deckCount[i] = 0;
    #####:  157:      for (j = 0; j < 3; j++)
        -:  158:	{
    #####:  159:	  state->deck[i][j] = estate;
    #####:  160:	  state->deckCount[i]++;
        -:  161:	}
    #####:  162:      for (j = 3; j < 10; j++)
        -:  163:	{
    #####:  164:	  state->deck[i][j] = copper;
    #####:  165:	  state->deckCount[i]++;		
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //shuffle player decks
    #####:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {
    #####:  172:      if ( shuffle(i, state) < 0 )
        -:  173:	{
    #####:  174:	  return -1;
        -:  175:	}
        -:  176:    }
        -:  177:
        -:  178:  //draw player hands
    #####:  179:  for (i = 0; i < numPlayers; i++)
        -:  180:    {  
        -:  181:      //initialize hand size to zero
    #####:  182:      state->handCount[i] = 0;
    #####:  183:      state->discardCount[i] = 0;
        -:  184:      //draw 5 cards
        -:  185:      // for (j = 0; j < 5; j++)
        -:  186:      //	{
        -:  187:      //	  drawCard(i, state);
        -:  188:      //	}
        -:  189:    }
        -:  190:  
        -:  191:  //set embargo tokens to 0 for all supply piles
    #####:  192:  for (i = 0; i <= treasure_map; i++)
        -:  193:    {
    #####:  194:      state->embargoTokens[i] = 0;
        -:  195:    }
        -:  196:
        -:  197:  //initialize first player's turn
    #####:  198:  state->outpostPlayed = 0;
    #####:  199:  state->phase = 0;
    #####:  200:  state->numActions = 1;
    #####:  201:  state->numBuys = 1;
    #####:  202:  state->playedCardCount = 0;
    #####:  203:  state->whoseTurn = 0;
    #####:  204:  state->handCount[state->whoseTurn] = 0;
        -:  205:  //int it; move to top
        -:  206:
        -:  207:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  208:  for (it = 0; it < 5; it++){
    #####:  209:    drawCard(state->whoseTurn, state);
        -:  210:  }
        -:  211:
    #####:  212:  updateCoins(state->whoseTurn, state, 0);
        -:  213:
    #####:  214:  return 0;
        -:  215:}
        -:  216:
     1941:  217:int shuffle(int player, struct gameState *state) {
        -:  218: 
        -:  219:
        -:  220:  int newDeck[MAX_DECK];
     1941:  221:  int newDeckPos = 0;
        -:  222:  int card;
        -:  223:  int i;
        -:  224:
     1941:  225:  if (state->deckCount[player] < 1){
     1941:  226:	if ((state->discardCount[player] + state->deckCount[player]) >= MAX_DECK) return -1;
   379101:  227:    for (i = 0; i < state->discardCount[player];i++){
   377160:  228:      state->deck[player][i] = state->discard[player][i];
   377160:  229:      state->discard[player][i] = -1;
        -:  230:    }
        -:  231:
     1941:  232:    state->deckCount[player] = state->discardCount[player];
     1941:  233:    state->discardCount[player] = 0;//Reset discard
        -:  234:  }
     1941:  235:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  236:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  237:
   381042:  238:  while (state->deckCount[player] > 0) {
   377160:  239:    card = floor(Random() * state->deckCount[player]);
   377160:  240:    newDeck[newDeckPos] = state->deck[player][card];
   377160:  241:    newDeckPos++;
 30837295:  242:    for (i = card; i < state->deckCount[player]-1; i++) {
 30460135:  243:      state->deck[player][i] = state->deck[player][i+1];
        -:  244:    }
   377160:  245:    state->deckCount[player]--;
        -:  246:  }
   379101:  247:  for (i = 0; i < newDeckPos; i++) {
   377160:  248:    state->deck[player][i] = newDeck[i];
   377160:  249:    state->deckCount[player]++;
        -:  250:  }
        -:  251:
     1941:  252:  return 0;
        -:  253:}
        -:  254:
    #####:  255:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  256:{	
        -:  257:  int card;
    #####:  258:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  259:
        -:  260:  //check if it is the right phase
    #####:  261:  if (state->phase != 0)
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //check if player has enough actions
    #####:  267:  if ( state->numActions < 1 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:	
        -:  272:  //get card played
    #####:  273:  card = handCard(handPos, state);
        -:  274:	
        -:  275:  //check if selected card is an action
    #####:  276:  if ( card < adventurer || card > treasure_map )
        -:  277:    {
    #####:  278:      return -1;
        -:  279:    }
        -:  280:	
        -:  281:  //play card
    #####:  282:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  283:    {
    #####:  284:      return -1;
        -:  285:    }
        -:  286:	
        -:  287:  //reduce number of actions
    #####:  288:  state->numActions--;
        -:  289:
        -:  290:  //update coins (Treasure cards may be added with card draws)
    #####:  291:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  292:	
    #####:  293:  return 0;
        -:  294:}
        -:  295:
    #####:  296:int buyCard(int supplyPos, struct gameState *state) {
        -:  297:  int who;
        -:  298:  if (DEBUG){
        -:  299:    printf("Entering buyCard...\n");
        -:  300:  }
        -:  301:
        -:  302:  // I don't know what to do about the phase thing.
        -:  303:
    #####:  304:  who = state->whoseTurn;
        -:  305:
    #####:  306:  if (state->numBuys < 1){
        -:  307:    if (DEBUG)
        -:  308:      printf("You do not have any buys left\n");
    #####:  309:    return -1;
    #####:  310:  } else if (supplyCount(supplyPos, state) <1){
        -:  311:    if (DEBUG)
        -:  312:      printf("There are not any of that type of card left\n");
    #####:  313:    return -1;
    #####:  314:  } else if (state->coins < getCost(supplyPos)){
        -:  315:    if (DEBUG) 
        -:  316:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  317:    return -1;
        -:  318:  } else {
    #####:  319:    state->phase=1;
        -:  320:    //state->supplyCount[supplyPos]--;
    #####:  321:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  322:  
    #####:  323:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  324:    state->numBuys--;
        -:  325:    if (DEBUG)
        -:  326:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  327:  }
        -:  328:
        -:  329:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  330:  //state->discardCount[who]++;
        -:  331:    
    #####:  332:  return 0;
        -:  333:}
        -:  334:
    #####:  335:int numHandCards(struct gameState *state) {
    #####:  336:  return state->handCount[ whoseTurn(state) ];
        -:  337:}
        -:  338:
    #####:  339:int handCard(int handPos, struct gameState *state) {
    #####:  340:  int currentPlayer = whoseTurn(state);
    #####:  341:  return state->hand[currentPlayer][handPos];
        -:  342:}
        -:  343:
    #####:  344:int supplyCount(int card, struct gameState *state) {
    #####:  345:  return state->supplyCount[card];
        -:  346:}
        -:  347:
    #####:  348:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  349:  int i;
    #####:  350:  int count = 0;
        -:  351:
    #####:  352:  for (i = 0; i < state->deckCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->deck[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:    {
    #####:  359:      if (state->hand[player][i] == card) count++;
        -:  360:    }
        -:  361:
    #####:  362:  for (i = 0; i < state->discardCount[player]; i++)
        -:  363:    {
    #####:  364:      if (state->discard[player][i] == card) count++;
        -:  365:    }
        -:  366:
    #####:  367:  return count;
        -:  368:}
        -:  369:
    86000:  370:int whoseTurn(struct gameState *state) {
    86000:  371:  return state->whoseTurn;
        -:  372:}
        -:  373:
    #####:  374:int endTurn(struct gameState *state) {
        -:  375:  int k;
        -:  376:  int i;
    #####:  377:  int currentPlayer = whoseTurn(state);
        -:  378:  
        -:  379:  //Discard hand
    #####:  380:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  381:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  382:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  383:  }
    #####:  384:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  385:    
        -:  386:  //Code for determining the player
    #####:  387:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  388:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  389:  }
        -:  390:  else{
    #####:  391:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  392:  }
        -:  393:
    #####:  394:  state->outpostPlayed = 0;
    #####:  395:  state->phase = 0;
    #####:  396:  state->numActions = 1;
    #####:  397:  state->coins = 0;
    #####:  398:  state->numBuys = 1;
    #####:  399:  state->playedCardCount = 0;
    #####:  400:  state->handCount[state->whoseTurn] = 0;
        -:  401:
        -:  402:  //int k; move to top
        -:  403:  //Next player draws hand
    #####:  404:  for (k = 0; k < 5; k++){
    #####:  405:    drawCard(state->whoseTurn, state);//Draw a card
        -:  406:  }
        -:  407:
        -:  408:  //Update money
    #####:  409:  updateCoins(state->whoseTurn, state , 0);
        -:  410:
    #####:  411:  return 0;
        -:  412:}
        -:  413:
    #####:  414:int isGameOver(struct gameState *state) {
        -:  415:  int i;
        -:  416:  int j;
        -:  417:	
        -:  418:  //if stack of Province cards is empty, the game ends
    #####:  419:  if (state->supplyCount[province] == 0)
        -:  420:    {
    #####:  421:      return 1;
        -:  422:    }
        -:  423:
        -:  424:  //if three supply pile are at 0, the game ends
    #####:  425:  j = 0;
    #####:  426:  for (i = 0; i < 25; i++)
        -:  427:    {
    #####:  428:      if (state->supplyCount[i] == 0)
        -:  429:	{
    #####:  430:	  j++;
        -:  431:	}
        -:  432:    }
    #####:  433:  if ( j >= 3)
        -:  434:    {
    #####:  435:      return 1;
        -:  436:    }
        -:  437:
    #####:  438:  return 0;
        -:  439:}
        -:  440:
    #####:  441:int scoreFor (int player, struct gameState *state) {
        -:  442:
        -:  443:  int i;
    #####:  444:  int score = 0;
        -:  445:  //score from hand
    #####:  446:  for (i = 0; i < state->handCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
        -:  456:  //score from discard
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  465:    }
        -:  466:
        -:  467:  //score from deck
    #####:  468:  for (i = 0; i < state->discardCount[player]; i++)
        -:  469:    {
    #####:  470:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  471:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  472:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  473:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  474:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  475:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  476:    }
        -:  477:
    #####:  478:  return score;
        -:  479:}
        -:  480:
    #####:  481:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  482:  int i;	
        -:  483:  int j;
        -:  484:  int highScore;
        -:  485:  int currentPlayer;
        -:  486:
        -:  487:  //get score for each player
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
        -:  490:      //set unused player scores to -9999
    #####:  491:      if (i >= state->numPlayers)
        -:  492:	{
    #####:  493:	  players[i] = -9999;
        -:  494:	}
        -:  495:      else
        -:  496:	{
    #####:  497:	  players[i] = scoreFor (i, state);
        -:  498:	}
        -:  499:    }
        -:  500:
        -:  501:  //find highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if (players[i] > players[j])
        -:  506:	{
    #####:  507:	  j = i;
        -:  508:	}
        -:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //add 1 to players who had less turns
    #####:  513:  currentPlayer = whoseTurn(state);
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore && i > currentPlayer )
        -:  517:	{
    #####:  518:	  players[i]++;
        -:  519:	}
        -:  520:    }
        -:  521:
        -:  522:  //find new highest score
    #####:  523:  j = 0;
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] > players[j] )
        -:  527:	{
    #####:  528:	  j = i;
        -:  529:	}
        -:  530:    }
    #####:  531:  highScore = players[j];
        -:  532:
        -:  533:  //set winners in array to 1 and rest to 0
    #####:  534:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  535:    {
    #####:  536:      if ( players[i] == highScore )
        -:  537:	{
    #####:  538:	  players[i] = 1;
        -:  539:	}
        -:  540:      else
        -:  541:	{
    #####:  542:	  players[i] = 0;
        -:  543:	}
        -:  544:    }
        -:  545:
    #####:  546:  return 0;
        -:  547:}
        -:  548:
   775026:  549:int drawCard(int player, struct gameState *state)
        -:  550:{	int count;
        -:  551:  int deckCounter;
   775026:  552:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  553:    
        -:  554:    //Step 1 Shuffle the discard pile back into a deck
        -:  555:    int i;
        -:  556:    //Move discard to deck
      196:  557:    for (i = 0; i < state->discardCount[player];i++){
    #####:  558:      state->deck[player][i] = state->discard[player][i];
    #####:  559:      state->discard[player][i] = -1;
        -:  560:    }
        -:  561:
      196:  562:    state->deckCount[player] = state->discardCount[player];
      196:  563:    state->discardCount[player] = 0;//Reset discard
        -:  564:
        -:  565:    //Shufffle the deck
      196:  566:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  567:   
        -:  568:    if (DEBUG){//Debug statements
        -:  569:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  570:    }
        -:  571:    
      196:  572:    state->discardCount[player] = 0;
        -:  573:
        -:  574:    //Step 2 Draw Card
      196:  575:    count = state->handCount[player];//Get current player's hand count
        -:  576:    
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:    
      196:  581:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  582:
      196:  583:    if (deckCounter == 0)
      196:  584:      return -1;
        -:  585:
    #####:  586:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  587:    state->deckCount[player]--;
    #####:  588:    state->handCount[player]++;//Increment hand count
        -:  589:  }
        -:  590:
        -:  591:  else{
   774830:  592:    int count = state->handCount[player];//Get current hand count for player
        -:  593:    int deckCounter;
        -:  594:    if (DEBUG){//Debug statements
        -:  595:      printf("Current hand count: %d\n", count);
        -:  596:    }
        -:  597:
   774830:  598:    deckCounter = state->deckCount[player];//Create holder for the deck count
   774830:  599:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   774830:  600:    state->deckCount[player]--;
   774830:  601:    state->handCount[player]++;//Increment hand count
        -:  602:  }
        -:  603:
   774830:  604:  return 0;
        -:  605:}
        -:  606:
    #####:  607:int getCost(int cardNumber)
        -:  608:{
    #####:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
    #####:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:    case adventurer:
    #####:  626:      return 6;
        -:  627:    case council_room:
    #####:  628:      return 5;
        -:  629:    case feast:
    #####:  630:      return 4;
        -:  631:    case gardens:
    #####:  632:      return 4;
        -:  633:    case mine:
    #####:  634:      return 5;
        -:  635:    case remodel:
    #####:  636:      return 4;
        -:  637:    case smithy:
    #####:  638:      return 4;
        -:  639:    case village:
    #####:  640:      return 3;
        -:  641:    case baron:
    #####:  642:      return 4;
        -:  643:    case great_hall:
    #####:  644:      return 3;
        -:  645:    case minion:
    #####:  646:      return 5;
        -:  647:    case steward:
    #####:  648:      return 3;
        -:  649:    case tribute:
    #####:  650:      return 5;
        -:  651:    case ambassador:
    #####:  652:      return 3;
        -:  653:    case cutpurse:
    #####:  654:      return 4;
        -:  655:    case embargo: 
    #####:  656:      return 2;
        -:  657:    case outpost:
    #####:  658:      return 5;
        -:  659:    case salvager:
    #####:  660:      return 4;
        -:  661:    case sea_hag:
    #####:  662:      return 4;
        -:  663:    case treasure_map:
    #####:  664:      return 4;
        -:  665:    }
        -:  666:	
    #####:  667:  return -1;
        -:  668:}
        -:  669:
    43000:  670:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  671:{
        -:  672:  int i;
        -:  673:  int j;
        -:  674:  int k;
        -:  675:  int x;
        -:  676:  int index;
    43000:  677:  int currentPlayer = whoseTurn(state);
    43000:  678:  int nextPlayer = currentPlayer + 1;
        -:  679:
    43000:  680:  int tributeRevealedCards[2] = {-1, -1};
        -:  681:  int temphand[MAX_HAND];// moved above the if statement
    43000:  682:  if (nextPlayer > (state->numPlayers - 1)){
    15525:  683:    nextPlayer = 0;
        -:  684:  }
        -:  685:  
        -:  686:	
        -:  687:  //uses switch to select card and perform actions
    43000:  688:  switch( card ) 
        -:  689:    {
        -:  690:    case adventurer:
    43000:  691:      playAdventurer(state);
    43000:  692:      return 0;
        -:  693:			
        -:  694:    case council_room:
    #####:  695:      playCouncilRoom(state, handPos);			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
    #####:  711:	if (supplyCount(choice1, state) <= 0){
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
        -:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
        -:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
        -:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  756:
    #####:  757:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:		
    #####:  762:      if (choice2 > treasure_map || choice2 < curse)
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  768:	{
    #####:  769:	  return -1;
        -:  770:	}
        -:  771:
    #####:  772:      gainCard(choice2, state, 2, currentPlayer);
        -:  773:
        -:  774:      //discard card from hand
    #####:  775:      discardCard(handPos, currentPlayer, state, 0);
        -:  776:
        -:  777:      //discard trashed card
    #####:  778:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  779:	{
    #####:  780:	  if (state->hand[currentPlayer][i] == j)
        -:  781:	    {
    #####:  782:	      discardCard(i, currentPlayer, state, 0);			
    #####:  783:	      break;
        -:  784:	    }
        -:  785:	}
        -:  786:			
    #####:  787:      return 0;
        -:  788:			
        -:  789:    case remodel:
    #####:  790:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 0, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:
        -:  812:
    #####:  813:      return 0;
        -:  814:		
        -:  815:    case smithy:
    #####:  816:	playSmithy(state, handPos);
    #####:  817:      return 0;
        -:  818:		
        -:  819:    case village:
    #####:  820:      playVillage(state, handPos);
    #####:  821:      return 0;
        -:  822:		
        -:  823:    case baron:
    #####:  824:      state->numBuys++;//Increase buys by 1!
    #####:  825:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  826:	int p = 0;//Iterator for hand!
    #####:  827:	int card_not_discarded = 1;//Flag for discard set!
    #####:  828:	while(card_not_discarded){
    #####:  829:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  830:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  831:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  832:	    state->discardCount[currentPlayer]++;
    #####:  833:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  834:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  835:	    }
    #####:  836:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  837:	    state->handCount[currentPlayer]--;
    #####:  838:	    card_not_discarded = 0;//Exit the loop
        -:  839:	  }
    #####:  840:	  else if (p > state->handCount[currentPlayer]){
        -:  841:	    if(DEBUG) {
        -:  842:	      printf("No estate cards in your hand, invalid choice\n");
        -:  843:	      printf("Must gain an estate if there are any\n");
        -:  844:	    }
    #####:  845:	    if (supplyCount(estate, state) > 0){
    #####:  846:	      gainCard(estate, state, 0, currentPlayer);
    #####:  847:	      state->supplyCount[estate]--;//Decrement estates
    #####:  848:	      if (supplyCount(estate, state) == 0){
    #####:  849:		isGameOver(state);
        -:  850:	      }
        -:  851:	    }
    #####:  852:	    card_not_discarded = 0;//Exit the loop
        -:  853:	  }
        -:  854:			    
        -:  855:	  else{
    #####:  856:	    p++;//Next card
        -:  857:	  }
        -:  858:	}
        -:  859:      }
        -:  860:			    
        -:  861:      else{
    #####:  862:	if (supplyCount(estate, state) > 0){
    #####:  863:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  864:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  865:	  if (supplyCount(estate, state) == 0){
    #####:  866:	    isGameOver(state);
        -:  867:	  }
        -:  868:	}
        -:  869:      }
        -:  870:	    
        -:  871:      
    #####:  872:      return 0;
        -:  873:		
        -:  874:    case great_hall:
        -:  875:      //+1 Card
    #####:  876:      drawCard(currentPlayer, state);
        -:  877:			
        -:  878:      //+1 Actions
    #####:  879:      state->numActions++;
        -:  880:			
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
    #####:  883:      return 0;
        -:  884:		
        -:  885:    case minion:
        -:  886:      //+1 action
    #####:  887:      state->numActions++;
        -:  888:			
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:			
    #####:  892:      if (choice1)		//+2 coins
        -:  893:	{
    #####:  894:	  state->coins = state->coins + 2;
        -:  895:	}
        -:  896:			
    #####:  897:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  898:	{
        -:  899:	  //discard hand
    #####:  900:	  while(numHandCards(state) > 0)
        -:  901:	    {
    #####:  902:	      discardCard(handPos, currentPlayer, state, 0);
        -:  903:	    }
        -:  904:				
        -:  905:	  //draw 4
    #####:  906:	  for (i = 0; i < 4; i++)
        -:  907:	    {
    #####:  908:	      drawCard(currentPlayer, state);
        -:  909:	    }
        -:  910:				
        -:  911:	  //other players discard hand and redraw if hand size > 4
    #####:  912:	  for (i = 0; i < state->numPlayers; i++)
        -:  913:	    {
    #####:  914:	      if (i != currentPlayer)
        -:  915:		{
    #####:  916:		  if ( state->handCount[i] > 4 )
        -:  917:		    {
        -:  918:		      //discard hand
    #####:  919:		      while( state->handCount[i] > 0 )
        -:  920:			{
    #####:  921:			  discardCard(handPos, i, state, 0);
        -:  922:			}
        -:  923:							
        -:  924:		      //draw 4
    #####:  925:		      for (j = 0; j < 4; j++)
        -:  926:			{
    #####:  927:			  drawCard(i, state);
        -:  928:			}
        -:  929:		    }
        -:  930:		}
        -:  931:	    }
        -:  932:				
        -:  933:	}
    #####:  934:      return 0;
        -:  935:		
        -:  936:    case steward:
    #####:  937:      if (choice1 == 1)
        -:  938:	{
        -:  939:	  //+2 cards
    #####:  940:	  drawCard(currentPlayer, state);
    #####:  941:	  drawCard(currentPlayer, state);
        -:  942:	}
    #####:  943:      else if (choice1 == 2)
        -:  944:	{
        -:  945:	  //+2 coins
    #####:  946:	  state->coins = state->coins + 2;
        -:  947:	}
        -:  948:      else
        -:  949:	{
        -:  950:	  //trash 2 cards in hand
    #####:  951:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  952:	  discardCard(choice3, currentPlayer, state, 1);
        -:  953:	}
        -:  954:			
        -:  955:      //discard card from hand
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case tribute:
    #####:  960:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  961:	if (state->deckCount[nextPlayer] > 0){
    #####:  962:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  963:	  state->deckCount[nextPlayer]--;
        -:  964:	}
    #####:  965:	else if (state->discardCount[nextPlayer] > 0){
    #####:  966:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  967:	  state->discardCount[nextPlayer]--;
        -:  968:	}
        -:  969:	else{
        -:  970:	  //No Card to Reveal
        -:  971:	  if (DEBUG){
        -:  972:	    printf("No cards to reveal\n");
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      else{
    #####:  978:	if (state->deckCount[nextPlayer] == 0){
    #####:  979:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  980:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  981:	    state->deckCount[nextPlayer]++;
    #####:  982:	    state->discard[nextPlayer][i] = -1;
    #####:  983:	    state->discardCount[nextPlayer]--;
        -:  984:	  }
        -:  985:			    
    #####:  986:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  987:	} 
    #####:  988:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
    #####:  991:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  992:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  993:	state->deckCount[nextPlayer]--;
        -:  994:      }    
        -:  995:		       
    #####:  996:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  997:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  998:	state->playedCardCount++;
    #####:  999:	tributeRevealedCards[1] = -1;
        -: 1000:      }
        -: 1001:
    #####: 1002:      for (i = 0; i <= 2; i ++){
    #####: 1003:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1004:	  state->coins += 2;
        -: 1005:	}
        -: 1006:		    
    #####: 1007:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1008:	  drawCard(currentPlayer, state);
    #####: 1009:	  drawCard(currentPlayer, state);
        -: 1010:	}
        -: 1011:	else{//Action Card
    #####: 1012:	  state->numActions = state->numActions + 2;
        -: 1013:	}
        -: 1014:      }
        -: 1015:	    
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case ambassador:
    #####: 1019:      j = 0;		//used to check if player has enough cards to discard
        -: 1020:
    #####: 1021:      if (choice2 > 2 || choice2 < 0)
        -: 1022:	{
    #####: 1023:	  return -1;				
        -: 1024:	}
        -: 1025:
    #####: 1026:      if (choice1 == handPos)
        -: 1027:	{
    #####: 1028:	  return -1;
        -: 1029:	}
        -: 1030:
    #####: 1031:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1032:	{
    #####: 1033:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1034:	    {
    #####: 1035:	      j++;
        -: 1036:	    }
        -: 1037:	}
    #####: 1038:      if (j < choice2)
        -: 1039:	{
    #####: 1040:	  return -1;				
        -: 1041:	}
        -: 1042:
        -: 1043:      if (DEBUG) 
        -: 1044:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1045:
        -: 1046:      //increase supply count for choosen card by amount being discarded
    #####: 1047:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1048:			
        -: 1049:      //each other player gains a copy of revealed card
    #####: 1050:      for (i = 0; i < state->numPlayers; i++)
        -: 1051:	{
    #####: 1052:	  if (i != currentPlayer)
        -: 1053:	    {
    #####: 1054:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1055:	    }
        -: 1056:	}
        -: 1057:
        -: 1058:      //discard played card from hand
    #####: 1059:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1060:
        -: 1061:      //trash copies of cards returned to supply
    #####: 1062:      for (j = 0; j < choice2; j++)
        -: 1063:	{
    #####: 1064:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1065:	    {
    #####: 1066:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1067:		{
    #####: 1068:		  discardCard(i, currentPlayer, state, 1);
    #####: 1069:		  break;
        -: 1070:		}
        -: 1071:	    }
        -: 1072:	}			
        -: 1073:
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case cutpurse:
        -: 1077:
    #####: 1078:      updateCoins(currentPlayer, state, 2);
    #####: 1079:      for (i = 0; i < state->numPlayers; i++)
        -: 1080:	{
    #####: 1081:	  if (i != currentPlayer)
        -: 1082:	    {
    #####: 1083:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1084:		{
    #####: 1085:		  if (state->hand[i][j] == copper)
        -: 1086:		    {
    #####: 1087:		      discardCard(j, i, state, 0);
    #####: 1088:		      break;
        -: 1089:		    }
    #####: 1090:		  if (j == state->handCount[i])
        -: 1091:		    {
    #####: 1092:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1093:			{
        -: 1094:			  if (DEBUG)
        -: 1095:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1096:			}	
    #####: 1097:		      break;
        -: 1098:		    }		
        -: 1099:		}
        -: 1100:					
        -: 1101:	    }
        -: 1102:				
        -: 1103:	}				
        -: 1104:
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
    #####: 1108:      return 0;
        -: 1109:
        -: 1110:		
        -: 1111:    case embargo: 
        -: 1112:      //+2 Coins
    #####: 1113:      state->coins = state->coins + 2;
        -: 1114:			
        -: 1115:      //see if selected pile is in play
    #####: 1116:      if ( state->supplyCount[choice1] == -1 )
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:			
        -: 1121:      //add embargo token to selected supply pile
    #####: 1122:      state->embargoTokens[choice1]++;
        -: 1123:			
        -: 1124:      //trash card
    #####: 1125:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1126:      return 0;
        -: 1127:		
        -: 1128:    case outpost:
        -: 1129:      //set outpost flag
    #####: 1130:      state->outpostPlayed++;
        -: 1131:			
        -: 1132:      //discard card
    #####: 1133:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case salvager:
        -: 1137:      //+1 buy
    #####: 1138:      state->numBuys++;
        -: 1139:			
    #####: 1140:      if (choice1)
        -: 1141:	{
        -: 1142:	  //gain coins equal to trashed card
    #####: 1143:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1144:	  //trash card
    #####: 1145:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1146:	}
        -: 1147:			
        -: 1148:      //discard card
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1150:      return 0;
        -: 1151:		
        -: 1152:    case sea_hag:
    #####: 1153:      playSeaHag(state, handPos);
    #####: 1154:      return 0;
        -: 1155:		
        -: 1156:    case treasure_map:
        -: 1157:      //search hand for another treasure_map
    #####: 1158:      index = -1;
    #####: 1159:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1160:	{
    #####: 1161:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1162:	    {
    #####: 1163:	      index = i;
    #####: 1164:	      break;
        -: 1165:	    }
        -: 1166:	}
    #####: 1167:      if (index > -1)
        -: 1168:	{
        -: 1169:	  //trash both treasure cards
    #####: 1170:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1171:	  discardCard(index, currentPlayer, state, 1);
        -: 1172:
        -: 1173:	  //gain 4 Gold cards
    #####: 1174:	  for (i = 0; i < 4; i++)
        -: 1175:	    {
    #####: 1176:	      gainCard(gold, state, 1, currentPlayer);
        -: 1177:	    }
        -: 1178:				
        -: 1179:	  //return success
    #####: 1180:	  return 1;
        -: 1181:	}
        -: 1182:			
        -: 1183:      //no second treasure_map found in hand
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
    #####: 1187:  return -1;
        -: 1188:}
        -: 1189:
    #####: 1190:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1191:{
        -: 1192:	
        -: 1193:  //if card is not trashed, added to Played pile 
    #####: 1194:  if (trashFlag < 1)
        -: 1195:    {
        -: 1196:      //add card to played pile
    #####: 1197:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1198:      state->playedCardCount++;
        -: 1199:    }
        -: 1200:	
        -: 1201:  //set played card to -1
    #####: 1202:  state->hand[currentPlayer][handPos] = -1;
        -: 1203:	
        -: 1204:  //remove card from player's hand
    #####: 1205:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1206:    {
        -: 1207:      //reduce number of cards in hand
    #####: 1208:      state->handCount[currentPlayer]--;
        -: 1209:    }
    #####: 1210:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1211:    {
        -: 1212:      //reduce number of cards in hand
    #####: 1213:      state->handCount[currentPlayer]--;
        -: 1214:    }
        -: 1215:  else 	
        -: 1216:    {
        -: 1217:      //replace discarded card with last card in hand
    #####: 1218:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1219:      //set last card to -1
    #####: 1220:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1221:      //reduce number of cards in hand
    #####: 1222:      state->handCount[currentPlayer]--;
        -: 1223:    }
        -: 1224:	
    #####: 1225:  return 0;
        -: 1226:}
        -: 1227:
    #####: 1228:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1229:{
        -: 1230:  //Note: supplyPos is enum of choosen card
        -: 1231:	
        -: 1232:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1233:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1234:    {
    #####: 1235:      return -1;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //added card for [whoseTurn] current player:
        -: 1239:  // toFlag = 0 : add to discard
        -: 1240:  // toFlag = 1 : add to deck
        -: 1241:  // toFlag = 2 : add to hand
        -: 1242:
    #####: 1243:  if (toFlag == 1)
        -: 1244:    {
    #####: 1245:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1246:      state->deckCount[player]++;
        -: 1247:    }
    #####: 1248:  else if (toFlag == 2)
        -: 1249:    {
    #####: 1250:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1251:      state->handCount[player]++;
        -: 1252:    }
        -: 1253:  else
        -: 1254:    {
    #####: 1255:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1256:      state->discardCount[player]++;
        -: 1257:    }
        -: 1258:	
        -: 1259:  //decrease number in supply pile
    #####: 1260:  state->supplyCount[supplyPos]--;
        -: 1261:	 
    #####: 1262:  return 0;
        -: 1263:}
        -: 1264:
    #####: 1265:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1266:{
        -: 1267:  int i;
        -: 1268:	
        -: 1269:  //reset coin count
    #####: 1270:  state->coins = 0;
        -: 1271:
        -: 1272:  //add coins for each Treasure card in player's hand
    #####: 1273:  for (i = 0; i < state->handCount[player]; i++)
        -: 1274:    {
    #####: 1275:      if (state->hand[player][i] == copper)
        -: 1276:	{
    #####: 1277:	  state->coins += 1;
        -: 1278:	}
    #####: 1279:      else if (state->hand[player][i] == silver)
        -: 1280:	{
    #####: 1281:	  state->coins += 2;
        -: 1282:	}
    #####: 1283:      else if (state->hand[player][i] == gold)
        -: 1284:	{
    #####: 1285:	  state->coins += 3;
        -: 1286:	}	
        -: 1287:    }	
        -: 1288:
        -: 1289:  //add bonus
    #####: 1290:  state->coins += bonus;
        -: 1291:
    #####: 1292:  return 0;
        -: 1293:}
        -: 1294:
        -: 1295://Draw cards until 2 treasures are drawn. Discard all drawn, non-treasure cards.
    43000: 1296:void playAdventurer(struct gameState *state){
    43000: 1297:  int currentPlayer = whoseTurn(state);
        -: 1298:  int temphand[MAX_HAND];// moved above the if statement
    43000: 1299:  int drawntreasure=0;
        -: 1300:  int cardDrawn;
        -: 1301://ERROR: z = 0 is correct
    43000: 1302:  int z = 1;// this is the counter for the temp hand
        -: 1303:
   861026: 1304:      while(drawntreasure<2){
   775026: 1305:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     1745: 1306:	  shuffle(currentPlayer, state);
        -: 1307:	}
   775026: 1308:	drawCard(currentPlayer, state);
   775026: 1309:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   775026: 1310:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    86000: 1311:	  drawntreasure++;
        -: 1312:	else{
   689026: 1313:	  temphand[z]=cardDrawn;
   689026: 1314:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   689026: 1315:	  z++;
        -: 1316:	}
        -: 1317:      }
   818026: 1318:      while(z-1>=0){
   732026: 1319:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   732026: 1320:	z=z-1;
        -: 1321:      }
        -: 1322:      //ERROR: does not remove Adventurer card from player hand
    43000: 1323:}
        -: 1324:
        -: 1325://Draw 3 cards
    #####: 1326:void playSmithy(struct gameState *state, int handPos){
    #####: 1327:  int currentPlayer = whoseTurn(state);
        -: 1328:      //+3 Cards
        -: 1329:      int i;
        -: 1330:      //ERROR: i < 3 is correct
    #####: 1331:      for (i = 0; i < 2; i++)
        -: 1332:	{
    #####: 1333:	  drawCard(currentPlayer, state);
        -: 1334:	}
        -: 1335:			
        -: 1336:      //discard card from hand
        -: 1337:      //ERROR: commented for fault - discardCard(handPos, currentPlayer, state, 0);
    #####: 1338:}
        -: 1339:
    #####: 1340:void playCouncilRoom(struct gameState *state, int handPos){
    #####: 1341:      int currentPlayer = whoseTurn(state);
        -: 1342:      int i;
        -: 1343:      //+4 Cards
    #####: 1344:      for (i = 0; i < 4; i++)
        -: 1345:	{
    #####: 1346:	  drawCard(currentPlayer, state);
        -: 1347:	}
        -: 1348:			
        -: 1349:      //+1 Buy
    #####: 1350:      state->numBuys++;
        -: 1351:			
        -: 1352:      //Each other player draws a card
    #####: 1353:      for (i = 0; i < state->numPlayers; i++)
        -: 1354:	{
        -: 1355:	      //ERROR: should be an else statement here to prevent currentPlayer from drawing a card.
    #####: 1356:	      drawCard(i, state);
        -: 1357:	}
        -: 1358:			
        -: 1359:      //put played card in played card pile
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1361:}
        -: 1362:
    #####: 1363:void playSeaHag(struct gameState *state, int handPos){
    #####: 1364:      int currentPlayer = whoseTurn(state);
        -: 1365:      int i;
    #####: 1366:      for (i = 0; i < state->numPlayers; i++){
    #####: 1367:	if (i != currentPlayer){
    #####: 1368:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1369:	  //ERROR: should not be commentd: state->deckCount[i]--;
    #####: 1370:	  state->discardCount[i]++;
    #####: 1371:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1372:	}
        -: 1373:      }
    #####: 1374:}
        -: 1375:
    #####: 1376:void playVillage(struct gameState *state, int handPos){
    #####: 1377:      int currentPlayer = whoseTurn(state);
        -: 1378:      //+1 Card
    #####: 1379:      drawCard(currentPlayer, state);
        -: 1380:      //+2 Actions
    #####: 1381:      state->numActions = state->numActions + 2;
        -: 1382:      //discard played card from hand
    #####: 1383:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1384:}
        -: 1385:
        -: 1386://end of dominion.c
