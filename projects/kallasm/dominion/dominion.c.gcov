        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://Draw 3 cards for current player
        -:    9:void playSmithy(struct gameState *state, int handPos);
        -:   10:
        -:   11://Draw cards until 2 treasure cards are drawn. Discard all other drawn cards.
        -:   12:void playAdventurer(struct gameState *state);
        -:   13:
        -:   14://Current player draws 4 cards and gets 1 buy. All other players draw a card.
        -:   15:void playCouncilRoom(struct gameState *state, int handPos);
        -:   16:
        -:   17://Each other player discards the top card of his deck and then gains a curse card,
        -:   18://	putting it on top of his deck
        -:   19:void playSeaHag(struct gameState *state, int handPos);
        -:   20:
        -:   21://Player draws 1 card and gets 2 additional actions this turn
        -:   22:void playVillage(struct gameState *state, int handPos);
        -:   23:
   756200:   24:int compare(const void* a, const void* b) {
   756200:   25:  if (*(int*)a > *(int*)b)
   378395:   26:    return 1;
   377805:   27:  if (*(int*)a < *(int*)b)
   170798:   28:    return -1;
   207007:   29:  return 0;
        -:   30:}
        -:   31:
    #####:   32:struct gameState* newGame() {
    #####:   33:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   34:  return g;
        -:   35:}
        -:   36:
    #####:   37:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   38:		  int k8, int k9, int k10) {
    #####:   39:  int* k = malloc(10 * sizeof(int));
    #####:   40:  k[0] = k1;
    #####:   41:  k[1] = k2;
    #####:   42:  k[2] = k3;
    #####:   43:  k[3] = k4;
    #####:   44:  k[4] = k5;
    #####:   45:  k[5] = k6;
    #####:   46:  k[6] = k7;
    #####:   47:  k[7] = k8;
    #####:   48:  k[8] = k9;
    #####:   49:  k[9] = k10;
    #####:   50:  return k;
        -:   51:}
        -:   52:
    #####:   53:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   54:		   struct gameState *state) {
        -:   55:
        -:   56:  int i;
        -:   57:  int j;
        -:   58:  int it;			
        -:   59:  //set up random number generator
    #####:   60:  SelectStream(1);
    #####:   61:  PutSeed((long)randomSeed);
        -:   62:  
        -:   63:  //check number of players
    #####:   64:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   65:    {
    #####:   66:      return -1;
        -:   67:    }
        -:   68:
        -:   69:  //set number of players
    #####:   70:  state->numPlayers = numPlayers;
        -:   71:
        -:   72:  //check selected kingdom cards are different
    #####:   73:  for (i = 0; i < 10; i++)
        -:   74:    {
    #####:   75:      for (j = 0; j < 10; j++)
        -:   76:        {
    #####:   77:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   78:	    {
    #####:   79:	      return -1;
        -:   80:	    }
        -:   81:        }
        -:   82:    }
        -:   83:
        -:   84:
        -:   85:  //initialize supply
        -:   86:  ///////////////////////////////
        -:   87:
        -:   88:  //set number of Curse cards
    #####:   89:  if (numPlayers == 2)
        -:   90:    {
    #####:   91:      state->supplyCount[curse] = 10;
        -:   92:    }
    #####:   93:  else if (numPlayers == 3)
        -:   94:    {
    #####:   95:      state->supplyCount[curse] = 20;
        -:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[curse] = 30;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Victory cards
    #####:  103:  if (numPlayers == 2)
        -:  104:    {
    #####:  105:      state->supplyCount[estate] = 8;
    #####:  106:      state->supplyCount[duchy] = 8;
    #####:  107:      state->supplyCount[province] = 8;
        -:  108:    }
        -:  109:  else
        -:  110:    {
    #####:  111:      state->supplyCount[estate] = 12;
    #####:  112:      state->supplyCount[duchy] = 12;
    #####:  113:      state->supplyCount[province] = 12;
        -:  114:    }
        -:  115:
        -:  116:  //set number of Treasure cards
    #####:  117:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  118:  state->supplyCount[silver] = 40;
    #####:  119:  state->supplyCount[gold] = 30;
        -:  120:
        -:  121:  //set number of Kingdom cards
    #####:  122:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  123:    {
    #####:  124:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  125:	{
    #####:  126:	  if (kingdomCards[j] == i)
        -:  127:	    {
        -:  128:	      //check if card is a 'Victory' Kingdom card
    #####:  129:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  130:		{
    #####:  131:		  if (numPlayers == 2){ 
    #####:  132:		    state->supplyCount[i] = 8; 
        -:  133:		  }
    #####:  134:		  else{ state->supplyCount[i] = 12; }
        -:  135:		}
        -:  136:	      else
        -:  137:		{
    #####:  138:		  state->supplyCount[i] = 10;
        -:  139:		}
    #####:  140:	      break;
        -:  141:	    }
        -:  142:	  else    //card is not in the set choosen for the game
        -:  143:	    {
    #####:  144:	      state->supplyCount[i] = -1;
        -:  145:	    }
        -:  146:	}
        -:  147:
        -:  148:    }
        -:  149:
        -:  150:  ////////////////////////
        -:  151:  //supply intilization complete
        -:  152:
        -:  153:  //set player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      state->deckCount[i] = 0;
    #####:  157:      for (j = 0; j < 3; j++)
        -:  158:	{
    #####:  159:	  state->deck[i][j] = estate;
    #####:  160:	  state->deckCount[i]++;
        -:  161:	}
    #####:  162:      for (j = 3; j < 10; j++)
        -:  163:	{
    #####:  164:	  state->deck[i][j] = copper;
    #####:  165:	  state->deckCount[i]++;		
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //shuffle player decks
    #####:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {
    #####:  172:      if ( shuffle(i, state) < 0 )
        -:  173:	{
    #####:  174:	  return -1;
        -:  175:	}
        -:  176:    }
        -:  177:
        -:  178:  //draw player hands
    #####:  179:  for (i = 0; i < numPlayers; i++)
        -:  180:    {  
        -:  181:      //initialize hand size to zero
    #####:  182:      state->handCount[i] = 0;
    #####:  183:      state->discardCount[i] = 0;
        -:  184:      //draw 5 cards
        -:  185:      // for (j = 0; j < 5; j++)
        -:  186:      //	{
        -:  187:      //	  drawCard(i, state);
        -:  188:      //	}
        -:  189:    }
        -:  190:  
        -:  191:  //set embargo tokens to 0 for all supply piles
    #####:  192:  for (i = 0; i <= treasure_map; i++)
        -:  193:    {
    #####:  194:      state->embargoTokens[i] = 0;
        -:  195:    }
        -:  196:
        -:  197:  //initialize first player's turn
    #####:  198:  state->outpostPlayed = 0;
    #####:  199:  state->phase = 0;
    #####:  200:  state->numActions = 1;
    #####:  201:  state->numBuys = 1;
    #####:  202:  state->playedCardCount = 0;
    #####:  203:  state->whoseTurn = 0;
    #####:  204:  state->handCount[state->whoseTurn] = 0;
        -:  205:  //int it; move to top
        -:  206:
        -:  207:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  208:  for (it = 0; it < 5; it++){
    #####:  209:    drawCard(state->whoseTurn, state);
        -:  210:  }
        -:  211:
    #####:  212:  updateCoins(state->whoseTurn, state, 0);
        -:  213:
    #####:  214:  return 0;
        -:  215:}
        -:  216:
      430:  217:int shuffle(int player, struct gameState *state) {
        -:  218: 
        -:  219:
        -:  220:  int newDeck[MAX_DECK];
      430:  221:  int newDeckPos = 0;
        -:  222:  int card;
        -:  223:  int i;
        -:  224:
      430:  225:  if (state->deckCount[player] < 1){
      367:  226:	if ((state->discardCount[player] + state->deckCount[player]) >= MAX_DECK) return -1;
    94632:  227:    for (i = 0; i < state->discardCount[player];i++){
    94265:  228:      state->deck[player][i] = state->discard[player][i];
    94265:  229:      state->discard[player][i] = -1;
        -:  230:    }
        -:  231:
      367:  232:    state->deckCount[player] = state->discardCount[player];
      367:  233:    state->discardCount[player] = 0;//Reset discard
        -:  234:  }
      430:  235:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  236:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  237:
   109639:  238:  while (state->deckCount[player] > 0) {
   108779:  239:    card = floor(Random() * state->deckCount[player]);
   108779:  240:    newDeck[newDeckPos] = state->deck[player][card];
   108779:  241:    newDeckPos++;
  8970218:  242:    for (i = card; i < state->deckCount[player]-1; i++) {
  8861439:  243:      state->deck[player][i] = state->deck[player][i+1];
        -:  244:    }
   108779:  245:    state->deckCount[player]--;
        -:  246:  }
   109209:  247:  for (i = 0; i < newDeckPos; i++) {
   108779:  248:    state->deck[player][i] = newDeck[i];
   108779:  249:    state->deckCount[player]++;
        -:  250:  }
        -:  251:
      430:  252:  return 0;
        -:  253:}
        -:  254:
    #####:  255:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  256:{	
        -:  257:  int card;
    #####:  258:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  259:
        -:  260:  //check if it is the right phase
    #####:  261:  if (state->phase != 0)
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //check if player has enough actions
    #####:  267:  if ( state->numActions < 1 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:	
        -:  272:  //get card played
    #####:  273:  card = handCard(handPos, state);
        -:  274:	
        -:  275:  //check if selected card is an action
    #####:  276:  if ( card < adventurer || card > treasure_map )
        -:  277:    {
    #####:  278:      return -1;
        -:  279:    }
        -:  280:	
        -:  281:  //play card
    #####:  282:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  283:    {
    #####:  284:      return -1;
        -:  285:    }
        -:  286:	
        -:  287:  //reduce number of actions
    #####:  288:  state->numActions--;
        -:  289:
        -:  290:  //update coins (Treasure cards may be added with card draws)
    #####:  291:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  292:	
    #####:  293:  return 0;
        -:  294:}
        -:  295:
    #####:  296:int buyCard(int supplyPos, struct gameState *state) {
        -:  297:  int who;
        -:  298:  if (DEBUG){
        -:  299:    printf("Entering buyCard...\n");
        -:  300:  }
        -:  301:
        -:  302:  // I don't know what to do about the phase thing.
        -:  303:
    #####:  304:  who = state->whoseTurn;
        -:  305:
    #####:  306:  if (state->numBuys < 1){
        -:  307:    if (DEBUG)
        -:  308:      printf("You do not have any buys left\n");
    #####:  309:    return -1;
    #####:  310:  } else if (supplyCount(supplyPos, state) <1){
        -:  311:    if (DEBUG)
        -:  312:      printf("There are not any of that type of card left\n");
    #####:  313:    return -1;
    #####:  314:  } else if (state->coins < getCost(supplyPos)){
        -:  315:    if (DEBUG) 
        -:  316:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  317:    return -1;
        -:  318:  } else {
    #####:  319:    state->phase=1;
        -:  320:    //state->supplyCount[supplyPos]--;
    #####:  321:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  322:  
    #####:  323:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  324:    state->numBuys--;
        -:  325:    if (DEBUG)
        -:  326:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  327:  }
        -:  328:
        -:  329:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  330:  //state->discardCount[who]++;
        -:  331:    
    #####:  332:  return 0;
        -:  333:}
        -:  334:
    #####:  335:int numHandCards(struct gameState *state) {
    #####:  336:  return state->handCount[ whoseTurn(state) ];
        -:  337:}
        -:  338:
    #####:  339:int handCard(int handPos, struct gameState *state) {
    #####:  340:  int currentPlayer = whoseTurn(state);
    #####:  341:  return state->hand[currentPlayer][handPos];
        -:  342:}
        -:  343:
    #####:  344:int supplyCount(int card, struct gameState *state) {
    #####:  345:  return state->supplyCount[card];
        -:  346:}
        -:  347:
    #####:  348:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  349:  int i;
    #####:  350:  int count = 0;
        -:  351:
    #####:  352:  for (i = 0; i < state->deckCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->deck[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:    {
    #####:  359:      if (state->hand[player][i] == card) count++;
        -:  360:    }
        -:  361:
    #####:  362:  for (i = 0; i < state->discardCount[player]; i++)
        -:  363:    {
    #####:  364:      if (state->discard[player][i] == card) count++;
        -:  365:    }
        -:  366:
    #####:  367:  return count;
        -:  368:}
        -:  369:
    60000:  370:int whoseTurn(struct gameState *state) {
    60000:  371:  return state->whoseTurn;
        -:  372:}
        -:  373:
    #####:  374:int endTurn(struct gameState *state) {
        -:  375:  int k;
        -:  376:  int i;
    #####:  377:  int currentPlayer = whoseTurn(state);
        -:  378:  
        -:  379:  //Discard hand
    #####:  380:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  381:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  382:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  383:  }
    #####:  384:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  385:    
        -:  386:  //Code for determining the player
    #####:  387:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  388:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  389:  }
        -:  390:  else{
    #####:  391:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  392:  }
        -:  393:
    #####:  394:  state->outpostPlayed = 0;
    #####:  395:  state->phase = 0;
    #####:  396:  state->numActions = 1;
    #####:  397:  state->coins = 0;
    #####:  398:  state->numBuys = 1;
    #####:  399:  state->playedCardCount = 0;
    #####:  400:  state->handCount[state->whoseTurn] = 0;
        -:  401:
        -:  402:  //int k; move to top
        -:  403:  //Next player draws hand
    #####:  404:  for (k = 0; k < 5; k++){
    #####:  405:    drawCard(state->whoseTurn, state);//Draw a card
        -:  406:  }
        -:  407:
        -:  408:  //Update money
    #####:  409:  updateCoins(state->whoseTurn, state , 0);
        -:  410:
    #####:  411:  return 0;
        -:  412:}
        -:  413:
    #####:  414:int isGameOver(struct gameState *state) {
        -:  415:  int i;
        -:  416:  int j;
        -:  417:	
        -:  418:  //if stack of Province cards is empty, the game ends
    #####:  419:  if (state->supplyCount[province] == 0)
        -:  420:    {
    #####:  421:      return 1;
        -:  422:    }
        -:  423:
        -:  424:  //if three supply pile are at 0, the game ends
    #####:  425:  j = 0;
    #####:  426:  for (i = 0; i < 25; i++)
        -:  427:    {
    #####:  428:      if (state->supplyCount[i] == 0)
        -:  429:	{
    #####:  430:	  j++;
        -:  431:	}
        -:  432:    }
    #####:  433:  if ( j >= 3)
        -:  434:    {
    #####:  435:      return 1;
        -:  436:    }
        -:  437:
    #####:  438:  return 0;
        -:  439:}
        -:  440:
    #####:  441:int scoreFor (int player, struct gameState *state) {
        -:  442:
        -:  443:  int i;
    #####:  444:  int score = 0;
        -:  445:  //score from hand
    #####:  446:  for (i = 0; i < state->handCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
        -:  456:  //score from discard
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  465:    }
        -:  466:
        -:  467:  //score from deck
    #####:  468:  for (i = 0; i < state->discardCount[player]; i++)
        -:  469:    {
    #####:  470:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  471:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  472:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  473:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  474:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  475:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  476:    }
        -:  477:
    #####:  478:  return score;
        -:  479:}
        -:  480:
    #####:  481:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  482:  int i;	
        -:  483:  int j;
        -:  484:  int highScore;
        -:  485:  int currentPlayer;
        -:  486:
        -:  487:  //get score for each player
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
        -:  490:      //set unused player scores to -9999
    #####:  491:      if (i >= state->numPlayers)
        -:  492:	{
    #####:  493:	  players[i] = -9999;
        -:  494:	}
        -:  495:      else
        -:  496:	{
    #####:  497:	  players[i] = scoreFor (i, state);
        -:  498:	}
        -:  499:    }
        -:  500:
        -:  501:  //find highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if (players[i] > players[j])
        -:  506:	{
    #####:  507:	  j = i;
        -:  508:	}
        -:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //add 1 to players who had less turns
    #####:  513:  currentPlayer = whoseTurn(state);
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore && i > currentPlayer )
        -:  517:	{
    #####:  518:	  players[i]++;
        -:  519:	}
        -:  520:    }
        -:  521:
        -:  522:  //find new highest score
    #####:  523:  j = 0;
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] > players[j] )
        -:  527:	{
    #####:  528:	  j = i;
        -:  529:	}
        -:  530:    }
    #####:  531:  highScore = players[j];
        -:  532:
        -:  533:  //set winners in array to 1 and rest to 0
    #####:  534:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  535:    {
    #####:  536:      if ( players[i] == highScore )
        -:  537:	{
    #####:  538:	  players[i] = 1;
        -:  539:	}
        -:  540:      else
        -:  541:	{
    #####:  542:	  players[i] = 0;
        -:  543:	}
        -:  544:    }
        -:  545:
    #####:  546:  return 0;
        -:  547:}
        -:  548:
   223283:  549:int drawCard(int player, struct gameState *state)
        -:  550:{	int count;
        -:  551:  int deckCounter;
   223283:  552:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  553:    
        -:  554:    //Step 1 Shuffle the discard pile back into a deck
        -:  555:    int i;
    14577:  556:    for (i = 0; i < state->discardCount[player];i++){
    14514:  557:      state->deck[player][i] = state->discard[player][i];
    14514:  558:      state->discard[player][i] = -1;
        -:  559:    }
        -:  560:
       63:  561:    state->deckCount[player] = state->discardCount[player];
       63:  562:    state->discardCount[player] = 0;//Reset discardj
        -:  563:    //Shufffle the deck
       63:  564:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  565:   
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  568:    }
        -:  569:    
       63:  570:    state->discardCount[player] = 0;
        -:  571:
        -:  572:    //Step 2 Draw Card
       63:  573:    count = state->handCount[player];//Get current player's hand count
        -:  574:    
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:    
       63:  579:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  580:
       63:  581:    if (deckCounter == 0)
    #####:  582:      return -1;
        -:  583:
       63:  584:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       63:  585:    state->deckCount[player]--;
       63:  586:    state->handCount[player]++;//Increment hand count
        -:  587:  }
        -:  588:
        -:  589:  else{
   223220:  590:    int count = state->handCount[player];//Get current hand count for player
        -:  591:    int deckCounter;
        -:  592:    if (DEBUG){//Debug statements
        -:  593:      printf("Current hand count: %d\n", count);
        -:  594:    }
        -:  595:
   223220:  596:    deckCounter = state->deckCount[player];//Create holder for the deck count
   223220:  597:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   223220:  598:    state->deckCount[player]--;
   223220:  599:    state->handCount[player]++;//Increment hand count
        -:  600:  }
        -:  601:
   223283:  602:  return 0;
        -:  603:}
        -:  604:
    #####:  605:int getCost(int cardNumber)
        -:  606:{
    #####:  607:  switch( cardNumber ) 
        -:  608:    {
        -:  609:    case curse:
    #####:  610:      return 0;
        -:  611:    case estate:
    #####:  612:      return 2;
        -:  613:    case duchy:
    #####:  614:      return 5;
        -:  615:    case province:
    #####:  616:      return 8;
        -:  617:    case copper:
    #####:  618:      return 0;
        -:  619:    case silver:
    #####:  620:      return 3;
        -:  621:    case gold:
    #####:  622:      return 6;
        -:  623:    case adventurer:
    #####:  624:      return 6;
        -:  625:    case council_room:
    #####:  626:      return 5;
        -:  627:    case feast:
    #####:  628:      return 4;
        -:  629:    case gardens:
    #####:  630:      return 4;
        -:  631:    case mine:
    #####:  632:      return 5;
        -:  633:    case remodel:
    #####:  634:      return 4;
        -:  635:    case smithy:
    #####:  636:      return 4;
        -:  637:    case village:
    #####:  638:      return 3;
        -:  639:    case baron:
    #####:  640:      return 4;
        -:  641:    case great_hall:
    #####:  642:      return 3;
        -:  643:    case minion:
    #####:  644:      return 5;
        -:  645:    case steward:
    #####:  646:      return 3;
        -:  647:    case tribute:
    #####:  648:      return 5;
        -:  649:    case ambassador:
    #####:  650:      return 3;
        -:  651:    case cutpurse:
    #####:  652:      return 4;
        -:  653:    case embargo: 
    #####:  654:      return 2;
        -:  655:    case outpost:
    #####:  656:      return 5;
        -:  657:    case salvager:
    #####:  658:      return 4;
        -:  659:    case sea_hag:
    #####:  660:      return 4;
        -:  661:    case treasure_map:
    #####:  662:      return 4;
        -:  663:    }
        -:  664:	
    #####:  665:  return -1;
        -:  666:}
        -:  667:
    30000:  668:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  669:{
        -:  670:  int i;
        -:  671:  int j;
        -:  672:  int k;
        -:  673:  int x;
        -:  674:  int index;
    30000:  675:  int currentPlayer = whoseTurn(state);
    30000:  676:  int nextPlayer = currentPlayer + 1;
        -:  677:
    30000:  678:  int tributeRevealedCards[2] = {-1, -1};
        -:  679:  int temphand[MAX_HAND];// moved above the if statement
    30000:  680:  if (nextPlayer > (state->numPlayers - 1)){
    10727:  681:    nextPlayer = 0;
        -:  682:  }
        -:  683:  
        -:  684:	
        -:  685:  //uses switch to select card and perform actions
    30000:  686:  switch( card ) 
        -:  687:    {
        -:  688:    case adventurer:
    10000:  689:      playAdventurer(state);
    10000:  690:      return 0;
        -:  691:			
        -:  692:    case council_room:
    #####:  693:      playCouncilRoom(state, handPos);			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    20000:  814:	playSmithy(state, handPos);
    20000:  815:      return 0;
        -:  816:		
        -:  817:    case village:
    #####:  818:      playVillage(state, handPos);
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case baron:
    #####:  822:      state->numBuys++;//Increase buys by 1!
    #####:  823:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  824:	int p = 0;//Iterator for hand!
    #####:  825:	int card_not_discarded = 1;//Flag for discard set!
    #####:  826:	while(card_not_discarded){
    #####:  827:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  828:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  829:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  830:	    state->discardCount[currentPlayer]++;
    #####:  831:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  832:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  833:	    }
    #####:  834:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  835:	    state->handCount[currentPlayer]--;
    #####:  836:	    card_not_discarded = 0;//Exit the loop
        -:  837:	  }
    #####:  838:	  else if (p > state->handCount[currentPlayer]){
        -:  839:	    if(DEBUG) {
        -:  840:	      printf("No estate cards in your hand, invalid choice\n");
        -:  841:	      printf("Must gain an estate if there are any\n");
        -:  842:	    }
    #####:  843:	    if (supplyCount(estate, state) > 0){
    #####:  844:	      gainCard(estate, state, 0, currentPlayer);
    #####:  845:	      state->supplyCount[estate]--;//Decrement estates
    #####:  846:	      if (supplyCount(estate, state) == 0){
    #####:  847:		isGameOver(state);
        -:  848:	      }
        -:  849:	    }
    #####:  850:	    card_not_discarded = 0;//Exit the loop
        -:  851:	  }
        -:  852:			    
        -:  853:	  else{
    #####:  854:	    p++;//Next card
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:			    
        -:  859:      else{
    #####:  860:	if (supplyCount(estate, state) > 0){
    #####:  861:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  862:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  863:	  if (supplyCount(estate, state) == 0){
    #####:  864:	    isGameOver(state);
        -:  865:	  }
        -:  866:	}
        -:  867:      }
        -:  868:	    
        -:  869:      
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case great_hall:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
        -:  875:			
        -:  876:      //+1 Actions
    #####:  877:      state->numActions++;
        -:  878:			
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case minion:
        -:  884:      //+1 action
    #####:  885:      state->numActions++;
        -:  886:			
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
        -:  889:			
    #####:  890:      if (choice1)		//+2 coins
        -:  891:	{
    #####:  892:	  state->coins = state->coins + 2;
        -:  893:	}
        -:  894:			
    #####:  895:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  896:	{
        -:  897:	  //discard hand
    #####:  898:	  while(numHandCards(state) > 0)
        -:  899:	    {
    #####:  900:	      discardCard(handPos, currentPlayer, state, 0);
        -:  901:	    }
        -:  902:				
        -:  903:	  //draw 4
    #####:  904:	  for (i = 0; i < 4; i++)
        -:  905:	    {
    #####:  906:	      drawCard(currentPlayer, state);
        -:  907:	    }
        -:  908:				
        -:  909:	  //other players discard hand and redraw if hand size > 4
    #####:  910:	  for (i = 0; i < state->numPlayers; i++)
        -:  911:	    {
    #####:  912:	      if (i != currentPlayer)
        -:  913:		{
    #####:  914:		  if ( state->handCount[i] > 4 )
        -:  915:		    {
        -:  916:		      //discard hand
    #####:  917:		      while( state->handCount[i] > 0 )
        -:  918:			{
    #####:  919:			  discardCard(handPos, i, state, 0);
        -:  920:			}
        -:  921:							
        -:  922:		      //draw 4
    #####:  923:		      for (j = 0; j < 4; j++)
        -:  924:			{
    #####:  925:			  drawCard(i, state);
        -:  926:			}
        -:  927:		    }
        -:  928:		}
        -:  929:	    }
        -:  930:				
        -:  931:	}
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case steward:
    #####:  935:      if (choice1 == 1)
        -:  936:	{
        -:  937:	  //+2 cards
    #####:  938:	  drawCard(currentPlayer, state);
    #####:  939:	  drawCard(currentPlayer, state);
        -:  940:	}
    #####:  941:      else if (choice1 == 2)
        -:  942:	{
        -:  943:	  //+2 coins
    #####:  944:	  state->coins = state->coins + 2;
        -:  945:	}
        -:  946:      else
        -:  947:	{
        -:  948:	  //trash 2 cards in hand
    #####:  949:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  950:	  discardCard(choice3, currentPlayer, state, 1);
        -:  951:	}
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case tribute:
    #####:  958:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  959:	if (state->deckCount[nextPlayer] > 0){
    #####:  960:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:	  state->deckCount[nextPlayer]--;
        -:  962:	}
    #####:  963:	else if (state->discardCount[nextPlayer] > 0){
    #####:  964:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  965:	  state->discardCount[nextPlayer]--;
        -:  966:	}
        -:  967:	else{
        -:  968:	  //No Card to Reveal
        -:  969:	  if (DEBUG){
        -:  970:	    printf("No cards to reveal\n");
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      else{
    #####:  976:	if (state->deckCount[nextPlayer] == 0){
    #####:  977:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  978:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  979:	    state->deckCount[nextPlayer]++;
    #####:  980:	    state->discard[nextPlayer][i] = -1;
    #####:  981:	    state->discardCount[nextPlayer]--;
        -:  982:	  }
        -:  983:			    
    #####:  984:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  985:	} 
    #####:  986:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  987:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  988:	state->deckCount[nextPlayer]--;
    #####:  989:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  990:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  991:	state->deckCount[nextPlayer]--;
        -:  992:      }    
        -:  993:		       
    #####:  994:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  995:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  996:	state->playedCardCount++;
    #####:  997:	tributeRevealedCards[1] = -1;
        -:  998:      }
        -:  999:
    #####: 1000:      for (i = 0; i <= 2; i ++){
    #####: 1001:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1002:	  state->coins += 2;
        -: 1003:	}
        -: 1004:		    
    #####: 1005:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1006:	  drawCard(currentPlayer, state);
    #####: 1007:	  drawCard(currentPlayer, state);
        -: 1008:	}
        -: 1009:	else{//Action Card
    #####: 1010:	  state->numActions = state->numActions + 2;
        -: 1011:	}
        -: 1012:      }
        -: 1013:	    
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case ambassador:
    #####: 1017:      j = 0;		//used to check if player has enough cards to discard
        -: 1018:
    #####: 1019:      if (choice2 > 2 || choice2 < 0)
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
    #####: 1024:      if (choice1 == handPos)
        -: 1025:	{
    #####: 1026:	  return -1;
        -: 1027:	}
        -: 1028:
    #####: 1029:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1030:	{
    #####: 1031:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1032:	    {
    #####: 1033:	      j++;
        -: 1034:	    }
        -: 1035:	}
    #####: 1036:      if (j < choice2)
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
        -: 1041:      if (DEBUG) 
        -: 1042:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1043:
        -: 1044:      //increase supply count for choosen card by amount being discarded
    #####: 1045:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1046:			
        -: 1047:      //each other player gains a copy of revealed card
    #####: 1048:      for (i = 0; i < state->numPlayers; i++)
        -: 1049:	{
    #####: 1050:	  if (i != currentPlayer)
        -: 1051:	    {
    #####: 1052:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1053:	    }
        -: 1054:	}
        -: 1055:
        -: 1056:      //discard played card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1058:
        -: 1059:      //trash copies of cards returned to supply
    #####: 1060:      for (j = 0; j < choice2; j++)
        -: 1061:	{
    #####: 1062:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1063:	    {
    #####: 1064:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1065:		{
    #####: 1066:		  discardCard(i, currentPlayer, state, 1);
    #####: 1067:		  break;
        -: 1068:		}
        -: 1069:	    }
        -: 1070:	}			
        -: 1071:
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case cutpurse:
        -: 1075:
    #####: 1076:      updateCoins(currentPlayer, state, 2);
    #####: 1077:      for (i = 0; i < state->numPlayers; i++)
        -: 1078:	{
    #####: 1079:	  if (i != currentPlayer)
        -: 1080:	    {
    #####: 1081:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1082:		{
    #####: 1083:		  if (state->hand[i][j] == copper)
        -: 1084:		    {
    #####: 1085:		      discardCard(j, i, state, 0);
    #####: 1086:		      break;
        -: 1087:		    }
    #####: 1088:		  if (j == state->handCount[i])
        -: 1089:		    {
    #####: 1090:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1091:			{
        -: 1092:			  if (DEBUG)
        -: 1093:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1094:			}	
    #####: 1095:		      break;
        -: 1096:		    }		
        -: 1097:		}
        -: 1098:					
        -: 1099:	    }
        -: 1100:				
        -: 1101:	}				
        -: 1102:
        -: 1103:      //discard played card from hand
    #####: 1104:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:
        -: 1108:		
        -: 1109:    case embargo: 
        -: 1110:      //+2 Coins
    #####: 1111:      state->coins = state->coins + 2;
        -: 1112:			
        -: 1113:      //see if selected pile is in play
    #####: 1114:      if ( state->supplyCount[choice1] == -1 )
        -: 1115:	{
    #####: 1116:	  return -1;
        -: 1117:	}
        -: 1118:			
        -: 1119:      //add embargo token to selected supply pile
    #####: 1120:      state->embargoTokens[choice1]++;
        -: 1121:			
        -: 1122:      //trash card
    #####: 1123:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case outpost:
        -: 1127:      //set outpost flag
    #####: 1128:      state->outpostPlayed++;
        -: 1129:			
        -: 1130:      //discard card
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1132:      return 0;
        -: 1133:		
        -: 1134:    case salvager:
        -: 1135:      //+1 buy
    #####: 1136:      state->numBuys++;
        -: 1137:			
    #####: 1138:      if (choice1)
        -: 1139:	{
        -: 1140:	  //gain coins equal to trashed card
    #####: 1141:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1142:	  //trash card
    #####: 1143:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1144:	}
        -: 1145:			
        -: 1146:      //discard card
    #####: 1147:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1148:      return 0;
        -: 1149:		
        -: 1150:    case sea_hag:
    #####: 1151:      playSeaHag(state, handPos);
    #####: 1152:      return 0;
        -: 1153:		
        -: 1154:    case treasure_map:
        -: 1155:      //search hand for another treasure_map
    #####: 1156:      index = -1;
    #####: 1157:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1158:	{
    #####: 1159:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1160:	    {
    #####: 1161:	      index = i;
    #####: 1162:	      break;
        -: 1163:	    }
        -: 1164:	}
    #####: 1165:      if (index > -1)
        -: 1166:	{
        -: 1167:	  //trash both treasure cards
    #####: 1168:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1169:	  discardCard(index, currentPlayer, state, 1);
        -: 1170:
        -: 1171:	  //gain 4 Gold cards
    #####: 1172:	  for (i = 0; i < 4; i++)
        -: 1173:	    {
    #####: 1174:	      gainCard(gold, state, 1, currentPlayer);
        -: 1175:	    }
        -: 1176:				
        -: 1177:	  //return success
    #####: 1178:	  return 1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //no second treasure_map found in hand
    #####: 1182:      return -1;
        -: 1183:    }
        -: 1184:	
    #####: 1185:  return -1;
        -: 1186:}
        -: 1187:
    #####: 1188:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1189:{
        -: 1190:	
        -: 1191:  //if card is not trashed, added to Played pile 
    #####: 1192:  if (trashFlag < 1)
        -: 1193:    {
        -: 1194:      //add card to played pile
    #####: 1195:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1196:      state->playedCardCount++;
        -: 1197:    }
        -: 1198:	
        -: 1199:  //set played card to -1
    #####: 1200:  state->hand[currentPlayer][handPos] = -1;
        -: 1201:	
        -: 1202:  //remove card from player's hand
    #####: 1203:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1204:    {
        -: 1205:      //reduce number of cards in hand
    #####: 1206:      state->handCount[currentPlayer]--;
        -: 1207:    }
    #####: 1208:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1209:    {
        -: 1210:      //reduce number of cards in hand
    #####: 1211:      state->handCount[currentPlayer]--;
        -: 1212:    }
        -: 1213:  else 	
        -: 1214:    {
        -: 1215:      //replace discarded card with last card in hand
    #####: 1216:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1217:      //set last card to -1
    #####: 1218:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1219:      //reduce number of cards in hand
    #####: 1220:      state->handCount[currentPlayer]--;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return 0;
        -: 1224:}
        -: 1225:
    #####: 1226:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1227:{
        -: 1228:  //Note: supplyPos is enum of choosen card
        -: 1229:	
        -: 1230:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1231:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:	
        -: 1236:  //added card for [whoseTurn] current player:
        -: 1237:  // toFlag = 0 : add to discard
        -: 1238:  // toFlag = 1 : add to deck
        -: 1239:  // toFlag = 2 : add to hand
        -: 1240:
    #####: 1241:  if (toFlag == 1)
        -: 1242:    {
    #####: 1243:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1244:      state->deckCount[player]++;
        -: 1245:    }
    #####: 1246:  else if (toFlag == 2)
        -: 1247:    {
    #####: 1248:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1249:      state->handCount[player]++;
        -: 1250:    }
        -: 1251:  else
        -: 1252:    {
    #####: 1253:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1254:      state->discardCount[player]++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //decrease number in supply pile
    #####: 1258:  state->supplyCount[supplyPos]--;
        -: 1259:	 
    #####: 1260:  return 0;
        -: 1261:}
        -: 1262:
    #####: 1263:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1264:{
        -: 1265:  int i;
        -: 1266:	
        -: 1267:  //reset coin count
    #####: 1268:  state->coins = 0;
        -: 1269:
        -: 1270:  //add coins for each Treasure card in player's hand
    #####: 1271:  for (i = 0; i < state->handCount[player]; i++)
        -: 1272:    {
    #####: 1273:      if (state->hand[player][i] == copper)
        -: 1274:	{
    #####: 1275:	  state->coins += 1;
        -: 1276:	}
    #####: 1277:      else if (state->hand[player][i] == silver)
        -: 1278:	{
    #####: 1279:	  state->coins += 2;
        -: 1280:	}
    #####: 1281:      else if (state->hand[player][i] == gold)
        -: 1282:	{
    #####: 1283:	  state->coins += 3;
        -: 1284:	}	
        -: 1285:    }	
        -: 1286:
        -: 1287:  //add bonus
    #####: 1288:  state->coins += bonus;
        -: 1289:
    #####: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293://Draw cards until 2 treasures are drawn. Discard all drawn, non-treasure cards.
    10000: 1294:void playAdventurer(struct gameState *state){
    10000: 1295:  int currentPlayer = whoseTurn(state);
        -: 1296:  int temphand[MAX_HAND];// moved above the if statement
    10000: 1297:  int drawntreasure=0;
        -: 1298:  int cardDrawn;
        -: 1299://ERROR: z = 0 is correct
    10000: 1300:  int z = 1;// this is the counter for the temp hand
        -: 1301:
   203283: 1302:      while(drawntreasure<2){
   183283: 1303:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      367: 1304:	  shuffle(currentPlayer, state);
        -: 1305:	}
   183283: 1306:	drawCard(currentPlayer, state);
   183283: 1307:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   183283: 1308:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    20000: 1309:	  drawntreasure++;
        -: 1310:	else{
   163283: 1311:	  temphand[z]=cardDrawn;
   163283: 1312:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   163283: 1313:	  z++;
        -: 1314:	}
        -: 1315:      }
   193283: 1316:      while(z-1>=0){
   173283: 1317:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   173283: 1318:	z=z-1;
        -: 1319:      }
        -: 1320:      //ERROR: does not remove Adventurer card from player hand
    10000: 1321:}
        -: 1322:
        -: 1323://Draw 3 cards
    20000: 1324:void playSmithy(struct gameState *state, int handPos){
    20000: 1325:  int currentPlayer = whoseTurn(state);
        -: 1326:      //+3 Cards
        -: 1327:      int i;
        -: 1328:      //ERROR: i < 3 is correct
    60000: 1329:      for (i = 0; i < 2; i++)
        -: 1330:	{
    40000: 1331:	  drawCard(currentPlayer, state);
        -: 1332:	}
        -: 1333:			
        -: 1334:      //discard card from hand
        -: 1335:      //ERROR: commented for fault - discardCard(handPos, currentPlayer, state, 0);
    20000: 1336:}
        -: 1337:
    #####: 1338:void playCouncilRoom(struct gameState *state, int handPos){
    #####: 1339:      int currentPlayer = whoseTurn(state);
        -: 1340:      int i;
        -: 1341:      //+4 Cards
    #####: 1342:      for (i = 0; i < 4; i++)
        -: 1343:	{
    #####: 1344:	  drawCard(currentPlayer, state);
        -: 1345:	}
        -: 1346:			
        -: 1347:      //+1 Buy
    #####: 1348:      state->numBuys++;
        -: 1349:			
        -: 1350:      //Each other player draws a card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:	{
        -: 1353:	      //ERROR: should be an else statement here to prevent currentPlayer from drawing a card.
    #####: 1354:	      drawCard(i, state);
        -: 1355:	}
        -: 1356:			
        -: 1357:      //put played card in played card pile
    #####: 1358:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1359:}
        -: 1360:
    #####: 1361:void playSeaHag(struct gameState *state, int handPos){
    #####: 1362:      int currentPlayer = whoseTurn(state);
        -: 1363:      int i;
    #####: 1364:      for (i = 0; i < state->numPlayers; i++){
    #####: 1365:	if (i != currentPlayer){
    #####: 1366:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1367:	  //ERROR: should not be commentd: state->deckCount[i]--;
    #####: 1368:	  state->discardCount[i]++;
    #####: 1369:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1370:	}
        -: 1371:      }
    #####: 1372:}
        -: 1373:
    #####: 1374:void playVillage(struct gameState *state, int handPos){
    #####: 1375:      int currentPlayer = whoseTurn(state);
        -: 1376:      //+1 Card
    #####: 1377:      drawCard(currentPlayer, state);
        -: 1378:      //+2 Actions
    #####: 1379:      state->numActions = state->numActions + 2;
        -: 1380:      //discard played card from hand
    #####: 1381:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1382:}
        -: 1383:
        -: 1384://end of dominion.c
